(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{367:function(s,t,e){"use strict";e.r(t);var a=e(42),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"deploying-pixelfed-on-arch-linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deploying-pixelfed-on-arch-linux"}},[s._v("#")]),s._v(" Deploying Pixelfed on Arch Linux")]),s._v(" "),e("h2",{attrs:{id:"assumptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assumptions"}},[s._v("#")]),s._v(" Assumptions")]),s._v(" "),e("p",[s._v("These instructions will install Pixelfed with the following:")]),s._v(" "),e("ul",[e("li",[s._v("Nginx (instead of Apache)")]),s._v(" "),e("li",[s._v("MariaDB (instead of PostgreSQL)")]),s._v(" "),e("li",[s._v("PHP-FPM (latest version)")]),s._v(" "),e("li",[s._v("Redis and PHP-FPM running via sockets instead of TCP (same machine)")]),s._v(" "),e("li",[e("code",[s._v("pixelfed")]),s._v(" user for running Horizon queues, "),e("code",[s._v("http")]),s._v(" user for running web processes (Arch default)")]),s._v(" "),e("li",[s._v("Repo cloned at "),e("code",[s._v("/srv/http/pixelfed")])]),s._v(" "),e("li",[s._v("No other sites/services running on this machine")])]),s._v(" "),e("h2",{attrs:{id:"preparing-a-machine"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#preparing-a-machine"}},[s._v("#")]),s._v(" Preparing a machine")]),s._v(" "),e("p",[s._v("You will need a machine running Arch Linux with access to the root account.")]),s._v(" "),e("ol",[e("li",[s._v("Login as "),e("code",[s._v("root")]),s._v(".")]),s._v(" "),e("li",[s._v("Create the "),e("code",[s._v("pixelfed")]),s._v(" user and group:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("useradd")]),s._v(" -rU -s /bin/bash -d /srv/http/pixelfed pixelfed\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("Install dependencies:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("pacman -S --needed nginx mariadb redis "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" php-fpm php-intl php-gd php-imagick php-redis "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" jpegoptim optipng pngquant imagemagick ffmpeg "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("unzip")]),s._v(" certbot certbot-nginx\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[s._v("Setup database. During "),e("code",[s._v("mysql_secure_installation")]),s._v(", hit Enter to use the default options. Make sure to set a password for the SQL user "),e("code",[s._v("root")]),s._v(" (as by default, there is no password).")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("mysql_install_db --user"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mysql --basedir"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr --datadir"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/var/lib/mysql\nsystemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" --now mariadb\nmysql_secure_installation\nmysql -u root -p\n")])])]),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("database")]),s._v(" pixelfed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("grant")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("all")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("privileges")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" pixelfed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'pixelfed'")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@'localhost'")]),s._v(" identified "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'strong_password'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nflush "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("privileges")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[s._v("Edit "),e("code",[s._v("/etc/php/php.ini")]),s._v(" and uncomment the following lines:")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("extension=bcmath\nextension=exif\nextension=iconv\nextension=intl\nextension=mysqli\nextension=pdo_mysql\n")])])]),e("p",[s._v("Edit the following lines to your desired upload limits:")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("post_max_size = 8M\nupload_max_filesize = 2M\nmax_file_uploads = 20\n")])])]),e("p",[s._v("Edit "),e("code",[s._v("/etc/php/conf.d/imagick.ini")]),s._v(" and uncomment:")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("extension=imagick\n")])])]),e("p",[s._v("Edit "),e("code",[s._v("/etc/php/conf.d/redis.ini")]),s._v(" and uncomment:")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("extension=redis\n")])])]),e("p",[s._v("Edit "),e("code",[s._v("/etc/php/conf.d/igbinary.ini")]),s._v(" and uncomment:")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("extension=igbinary\n")])])]),e("p",[s._v("Create a PHP-FPM pool for Pixelfed:")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /etc/php/php-fpm.d/\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" www.conf pixelfed.conf\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$EDITOR")]),s._v(" pixelfed.conf\n")])])]),e("p",[s._v("Make the following changes to the PHP-FPM pool:")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(";     use the username of the app-user as the pool name, e.g. pixelfed\n[pixelfed]\nuser = pixelfed\ngroup = pixelfed\n;    to use a tcp socket, e.g. if running php-fpm on a different machine than your app:\n;    (note that the port 9001 is used, since php-fpm defaults to running on port 9000;)\n;    (however, the port can be whatever you want)\n; listen = 127.0.0.1:9001;\n;    but it's better to use a socket if you're running locally on the same machine:\nlisten = /run/php-fpm/pixelfed.sock\nlisten.owner = http\nlisten.group = http\nlisten.mode = 0660\n[...]\n")])])]),e("ol",{attrs:{start:"6"}},[e("li",[s._v("Edit "),e("code",[s._v("/etc/redis.conf")]),s._v(" and edit the following lines:")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('port 6379                           # change this to "port 0" to disable network packets\nunixsocket /run/redis/redis.sock    # \nunixsocketperm 770                  # give permission to "redis" user and group\n')])])]),e("ol",{attrs:{start:"7"}},[e("li",[s._v("Edit "),e("code",[s._v("/etc/nginx/nginx.conf")]),s._v(":")])]),s._v(" "),e("div",{staticClass:"language-nginx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-nginx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("worker_processes")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# change to auto, or 1 x your CPU cores, but 1 is enough")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("events")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("worker_connections")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 512-1024 is fine for a small site, but you may want to use up to 10k or more, if running in production with many users")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("http")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [...]")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("gzip")]),s._v(" on"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uncomment this line")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("server")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# delete this entire block")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [...]")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("srv"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("http")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("pixelfed"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("nginx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("conf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# we will make this file later")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[s._v("Generate SSL cert:")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" /etc/nginx/ssl\nopenssl req -x509 -nodes -days "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("365")]),s._v(" -newkey rsa:2048 -keyout /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.crt\n")])])]),e("ol",{attrs:{start:"8"}},[e("li",[s._v("Add users to groups:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("usermod")]),s._v(" -aG redis pixelfed "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# give app user access to redis for queues")]),s._v("\n")])])]),e("ol",{attrs:{start:"9"}},[e("li",[s._v("Enable services:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("systemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("nginx,redis,php-fpm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nsystemctl start "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("redis,php-fpm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nginx will fail if started now")]),s._v("\n")])])]),e("h2",{attrs:{id:"pixelfed-setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pixelfed-setup"}},[s._v("#")]),s._v(" Pixelfed setup")]),s._v(" "),e("ol",[e("li",[s._v("Clone the repo:")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("cd /srv/http\ngit clone -b dev https://github.com/pixelfed/pixelfed.git pixelfed\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("Setup environment variables and nginx:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" pixelfed\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" contrib/nginx.conf nginx.conf\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$EDITOR")]),s._v(" nginx.conf\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## in particular, set:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### - the correct domain name")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### - client_max_body_size to your desired upload limit")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### - fastcgi_pass correct path (e.g. unix:/run/php-fpm/pixelfed.sock;)")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" .env.example .env\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$EDITOR")]),s._v(" .env\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## in particular, set:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### DB_SOCKET = /run/mysqld/mysqld.sock")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### REDIS_HOST = /run/redis/redis.sock")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### REDIS_PORT = null")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### IMAGE_DRIVER = imagick")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$EDITOR")]),s._v(" config/database.php\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## change predis to phpredis")]),s._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("Create the following file at "),e("code",[s._v("/etc/systemd/system/pixelfed.service")]),s._v(":")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("[Unit]\nDescription=Pixelfed task queueing via Laravel Horizon\nAfter=network.target\nRequires=mariadb\nRequires=php-fpm\nRequires=redis\nRequires=nginx\n\n[Service]\nType=simple\nExecStart=/usr/bin/php /srv/http/pixelfed/artisan horizon\nUser=pixelfed\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[s._v("Set permissions:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("chown")]),s._v(" -R pixelfed:pixelfed "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" -type d -exec "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("755")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" -type f -exec "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("644")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[s._v("Switch to the "),e("code",[s._v("pixelfed")]),s._v(" user:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("su")]),s._v(" - pixelfed\n")])])]),e("ol",{attrs:{start:"6"}},[e("li",[s._v("Deploy:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$EDITOR")]),s._v(" composer.json\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## change require php to >= instead of ^")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## remove beyondcode/laravel-self-diagnosis")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## change league/iso3166 to >= instead of ^")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## change spatie/laravel-image-optimizer to >= instead of ^")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## change laravel/ui to >= instead of ^")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" update\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" --no-ansi --no-interaction --no-progress --no-scripts --optimize-autoloader\nphp artisan key:generate\nphp artisan storage:link\nphp artisan horizon:install\nphp artisan horizon:publish\nphp artisan migrate --force\n")])])]),e("p",[s._v("Optionally, use cache [NOTE: if you run these commands, you will need to run them every time you change .env or update Pixelfed]:")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("php artisan config:cache\nphp artisan route:cache\nphp artisan view:cache\n")])])]),e("p",[s._v("Import Places data:")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("php artisan import:cities\n")])])]),e("ol",{attrs:{start:"7"}},[e("li",[s._v("Start web server and Horizon task queue:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v("\nsystemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" --now "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("nginx,pixelfed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);